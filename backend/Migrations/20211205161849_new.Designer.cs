// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.DataAccess;

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211205161849_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "Funcionario",
                            ConcurrencyStamp = "2",
                            Name = "Funcionario",
                            NormalizedName = "FUNCIONARIO"
                        },
                        new
                        {
                            Id = "Usuario",
                            ConcurrencyStamp = "3",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1b78746d-4fc2-4134-be69-2ca041a2fd9e",
                            RoleId = "Admin"
                        },
                        new
                        {
                            UserId = "5ff95fa9-027e-4a4d-b8db-5fc5a18f89c5",
                            RoleId = "Funcionario"
                        },
                        new
                        {
                            UserId = "5fce9bf7-687d-490e-8458-59628d28551c",
                            RoleId = "Usuario"
                        },
                        new
                        {
                            UserId = "76ece59b-af44-4eb8-92a1-437d17fa7502",
                            RoleId = "Usuario"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("cedula")
                        .HasColumnType("text");

                    b.Property<string>("direccion")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("genero")
                        .HasColumnType("integer");

                    b.Property<string>("nombre")
                        .HasColumnType("text");

                    b.Property<string>("primerApellido")
                        .HasColumnType("text");

                    b.Property<bool>("recibeOfertas")
                        .HasColumnType("boolean");

                    b.Property<string>("segundoApellido")
                        .HasColumnType("text");

                    b.Property<int>("tipoCedula")
                        .HasColumnType("integer");

                    b.Property<int>("tipoCuenta")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1b78746d-4fc2-4134-be69-2ca041a2fd9e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63832b5c-37a9-455a-943d-bfa74a292023",
                            Email = "admin@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECeO2MEsNvNL1El3EYUghNvSHekx76SpAjT7bnr96X/+IFGsktJif04osbHsxZ16yg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a03cbec8-32c8-4630-ad5f-517329d0c326",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            cedula = "11111111",
                            direccion = "Direcion Admin",
                            genero = 1,
                            nombre = "AlcaBox Admin",
                            primerApellido = "Alca",
                            recibeOfertas = false,
                            segundoApellido = "Box",
                            tipoCedula = 1,
                            tipoCuenta = 1
                        },
                        new
                        {
                            Id = "5ff95fa9-027e-4a4d-b8db-5fc5a18f89c5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47356310-000e-4681-ac3b-227be23e0446",
                            Email = "billy@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BILLY@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGUepLn9+miK+UYSMlDIoY2f+UGlUiPka0a9sA4xw4X5T+r8goJQuT/D+W5wOqJwAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2939d8b0-9393-4318-b9ba-03891308b413",
                            TwoFactorEnabled = false,
                            UserName = "Billy",
                            cedula = "87654321",
                            direccion = "Direcion Funcionario",
                            genero = 1,
                            nombre = "Billy",
                            primerApellido = "H",
                            recibeOfertas = false,
                            segundoApellido = "",
                            tipoCedula = 1,
                            tipoCuenta = 1
                        },
                        new
                        {
                            Id = "5fce9bf7-687d-490e-8458-59628d28551c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80b452f1-e830-4850-a040-850b9aafab96",
                            Email = "pablo@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PABLO@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOdhZk8qafJrNDNFUNcPV02zsD9P0ZBc6q43xXiWkDLe7+ocjTSHvCtGq2aiDEgPMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19f0ea5c-dbef-4fe9-86e3-6a6e15b90fb2",
                            TwoFactorEnabled = false,
                            UserName = "Pablo",
                            cedula = "12345678",
                            direccion = "Direcion Usuario",
                            genero = 1,
                            nombre = "Pablo J.",
                            primerApellido = "J",
                            recibeOfertas = true,
                            segundoApellido = "",
                            tipoCedula = 1,
                            tipoCuenta = 1
                        },
                        new
                        {
                            Id = "76ece59b-af44-4eb8-92a1-437d17fa7502",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f6ff550-d2f9-4826-8ec5-a65b57ea8b06",
                            Email = "bot@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOT@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN2jmqZCjBHMUBGS5iHT3epbHda1/i4RCLGw15a2qEEUcVlY723vHsU93kzoE1/SGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3443ad55-4c22-42cf-914d-3afb668c02ad",
                            TwoFactorEnabled = false,
                            UserName = "Bot",
                            cedula = "55555555",
                            direccion = "Direcion Bot",
                            genero = 1,
                            nombre = "Bot R.",
                            primerApellido = "B",
                            recibeOfertas = false,
                            segundoApellido = "",
                            tipoCedula = 1,
                            tipoCuenta = 1
                        });
                });

            modelBuilder.Entity("backend.Models.Arancel", b =>
                {
                    b.Property<int>("ArancelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("ArancelId");

                    b.ToTable("Arancel");

                    b.HasData(
                        new
                        {
                            ArancelId = 1,
                            Nombre = "Arancel_1"
                        },
                        new
                        {
                            ArancelId = 2,
                            Nombre = "Arancel_2"
                        });
                });

            modelBuilder.Entity("backend.Models.BitacoraAccion", b =>
                {
                    b.Property<int>("Accion_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Accion")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Usuarios")
                        .HasColumnType("text");

                    b.HasKey("Accion_Id");

                    b.HasIndex("Usuarios");

                    b.ToTable("BitacoraAccion");
                });

            modelBuilder.Entity("backend.Models.Estado", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("EstadoId");

                    b.ToTable("Estado");

                    b.HasData(
                        new
                        {
                            EstadoId = 1,
                            Nombre = "En espera a Courier"
                        },
                        new
                        {
                            EstadoId = 2,
                            Nombre = "Recibido en Courier"
                        },
                        new
                        {
                            EstadoId = 3,
                            Nombre = "En Tránsito a CR"
                        },
                        new
                        {
                            EstadoId = 4,
                            Nombre = "En vuelo"
                        },
                        new
                        {
                            EstadoId = 5,
                            Nombre = "Recibido en Aduanas"
                        },
                        new
                        {
                            EstadoId = 6,
                            Nombre = "En trámite Aduanal"
                        },
                        new
                        {
                            EstadoId = 7,
                            Nombre = "En proceso de Entrega"
                        },
                        new
                        {
                            EstadoId = 8,
                            Nombre = "Entregado"
                        },
                        new
                        {
                            EstadoId = 9,
                            Nombre = "Finalizado"
                        });
                });

            modelBuilder.Entity("backend.Models.Paquete", b =>
                {
                    b.Property<int>("PaqueteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArancelId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Peso")
                        .HasColumnType("double precision");

                    b.Property<double>("Precio")
                        .HasColumnType("double precision");

                    b.Property<int>("Tracking")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("PaqueteId");

                    b.HasIndex("ArancelId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Paquete");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.BitacoraAccion", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("Usuarios");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("backend.Models.Paquete", b =>
                {
                    b.HasOne("backend.Models.Arancel", "Arancel")
                        .WithMany()
                        .HasForeignKey("ArancelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Arancel");

                    b.Navigation("Estado");

                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
