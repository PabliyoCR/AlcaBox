// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.DataAccess;

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "58b590e6-deb5-457e-8a56-75a278186b43",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "263f897b-d27e-4a0f-8799-e05a99d805c9",
                            ConcurrencyStamp = "2",
                            Name = "Funcionario",
                            NormalizedName = "Funcionario"
                        },
                        new
                        {
                            Id = "198a2ca1-6bcf-4d08-9488-08f4a20e5510",
                            ConcurrencyStamp = "3",
                            Name = "Usuario",
                            NormalizedName = "Usuario"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "6c08929c-5b34-4347-9c1c-5e5edadd7802",
                            RoleId = "58b590e6-deb5-457e-8a56-75a278186b43"
                        },
                        new
                        {
                            UserId = "e6831f22-4f71-43a4-8579-78bf21e9ae51",
                            RoleId = "263f897b-d27e-4a0f-8799-e05a99d805c9"
                        },
                        new
                        {
                            UserId = "ec3c3873-dc40-49bc-89e6-1da64ce7c2e3",
                            RoleId = "198a2ca1-6bcf-4d08-9488-08f4a20e5510"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("backend.Models.Arancel", b =>
                {
                    b.Property<int>("Arancel_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Arancel_Id");

                    b.ToTable("Arancel");

                    b.HasData(
                        new
                        {
                            Arancel_Id = 1,
                            Nombre = "Arancel_1"
                        },
                        new
                        {
                            Arancel_Id = 2,
                            Nombre = "Arancel_2"
                        });
                });

            modelBuilder.Entity("backend.Models.BitacoraAccion", b =>
                {
                    b.Property<int>("Accion_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Accion")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Usuarios")
                        .HasColumnType("text");

                    b.HasKey("Accion_Id");

                    b.HasIndex("Usuarios");

                    b.ToTable("BitacoraAccion");
                });

            modelBuilder.Entity("backend.Models.Estado", b =>
                {
                    b.Property<int>("Estado_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Estado_Id");

                    b.ToTable("Estado");

                    b.HasData(
                        new
                        {
                            Estado_Id = 1,
                            Nombre = "En espera a Courier"
                        },
                        new
                        {
                            Estado_Id = 2,
                            Nombre = "Recibido en Courier"
                        },
                        new
                        {
                            Estado_Id = 3,
                            Nombre = "En Tránsito a CR"
                        },
                        new
                        {
                            Estado_Id = 4,
                            Nombre = "En vuelo"
                        },
                        new
                        {
                            Estado_Id = 5,
                            Nombre = "Recibido en Aduanas"
                        },
                        new
                        {
                            Estado_Id = 6,
                            Nombre = "En trámite Aduanal"
                        },
                        new
                        {
                            Estado_Id = 7,
                            Nombre = "En proceso de Entrega"
                        },
                        new
                        {
                            Estado_Id = 8,
                            Nombre = "Entregado"
                        },
                        new
                        {
                            Estado_Id = 9,
                            Nombre = "Finalizado"
                        });
                });

            modelBuilder.Entity("backend.Models.Paquete", b =>
                {
                    b.Property<int>("Paquete_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Aranceles")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("Estados")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Peso")
                        .HasColumnType("double precision");

                    b.Property<double>("Precio")
                        .HasColumnType("double precision");

                    b.Property<int>("Tracking")
                        .HasColumnType("integer");

                    b.Property<string>("Usuarios")
                        .HasColumnType("text");

                    b.HasKey("Paquete_Id");

                    b.HasIndex("Aranceles");

                    b.HasIndex("Estados");

                    b.HasIndex("Usuarios");

                    b.ToTable("Paquete");
                });

            modelBuilder.Entity("backend.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Acepta_Terminos")
                        .HasColumnType("boolean");

                    b.Property<string>("Cedula")
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Genero")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Primer_Apellido")
                        .HasColumnType("text");

                    b.Property<bool>("Recibe_Ofertas")
                        .HasColumnType("boolean");

                    b.Property<string>("Segundo_Apellido")
                        .HasColumnType("text");

                    b.Property<string>("TipoCedula")
                        .HasColumnType("text");

                    b.Property<string>("TipoCuenta")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "6c08929c-5b34-4347-9c1c-5e5edadd7802",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc08a525-0182-44e7-aaa7-57212dec50b4",
                            Email = "admin@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG30+UfkKaRnN0Z+dVej4MYant/80F06OZzVzbXR9EkVp01hXq3iTpyNgw0qh8LXJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cbab6fc-669e-45c0-a22b-2bfa7c7c15d7",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            Acepta_Terminos = false,
                            Recibe_Ofertas = false
                        },
                        new
                        {
                            Id = "e6831f22-4f71-43a4-8579-78bf21e9ae51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6b4b05f-d86f-4263-80e7-5649ec10c2e5",
                            Email = "billy@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BILLY@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHTeZhLm8IQlKczGA68ctbJHSLUh9P1BMpU15U8uslR/HwPuqmw9FGGfmAVPTZEvlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81979d10-aa95-4435-9687-b49e98d77183",
                            TwoFactorEnabled = false,
                            UserName = "Billy",
                            Acepta_Terminos = false,
                            Recibe_Ofertas = false
                        },
                        new
                        {
                            Id = "ec3c3873-dc40-49bc-89e6-1da64ce7c2e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53c21db8-de06-4ed0-8b2a-4c1a9cbacabd",
                            Email = "pablo@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PABLO@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGE1+FQAVTidS2HEa18N6a9VN9WOWlgupiFfUbbfVBjRc+ZfzTz4CbFLjR6mfogo0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79c5d0ca-66bc-4e7e-91d7-1afda95c6616",
                            TwoFactorEnabled = false,
                            UserName = "Pablo",
                            Acepta_Terminos = false,
                            Recibe_Ofertas = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.BitacoraAccion", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("Usuarios");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("backend.Models.Paquete", b =>
                {
                    b.HasOne("backend.Models.Arancel", "Arancel")
                        .WithMany()
                        .HasForeignKey("Aranceles");

                    b.HasOne("backend.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("Estados");

                    b.HasOne("backend.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("Usuarios");

                    b.Navigation("Arancel");

                    b.Navigation("Estado");

                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
