// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.DataAccess;

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211212021459_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "Funcionario",
                            ConcurrencyStamp = "2",
                            Name = "Funcionario",
                            NormalizedName = "FUNCIONARIO"
                        },
                        new
                        {
                            Id = "Usuario",
                            ConcurrencyStamp = "3",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b73f1664-dd4a-45b1-b794-cbbc0248fb8d",
                            RoleId = "Admin"
                        },
                        new
                        {
                            UserId = "18709e1f-effc-4fc0-896c-ab4ff6755280",
                            RoleId = "Funcionario"
                        },
                        new
                        {
                            UserId = "5db01d7b-7886-41c2-8674-ec5d8b790005",
                            RoleId = "Usuario"
                        },
                        new
                        {
                            UserId = "6bb6d963-66a2-48e6-8b58-afedc10a8996",
                            RoleId = "Usuario"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("cedula")
                        .HasColumnType("text");

                    b.Property<string>("direccion")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("genero")
                        .HasColumnType("integer");

                    b.Property<bool>("habilitado")
                        .HasColumnType("boolean");

                    b.Property<string>("nombre")
                        .HasColumnType("text");

                    b.Property<string>("primerApellido")
                        .HasColumnType("text");

                    b.Property<bool>("recibeOfertas")
                        .HasColumnType("boolean");

                    b.Property<string>("segundoApellido")
                        .HasColumnType("text");

                    b.Property<int>("tipoCedula")
                        .HasColumnType("integer");

                    b.Property<int>("tipoCuenta")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b73f1664-dd4a-45b1-b794-cbbc0248fb8d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "041e97e2-4a67-45f3-a8eb-bda3ac17381f",
                            Email = "admin@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHn/F7NFQWcEzT/b883oUyeKUdPAW/3LWMcXapRPt0ZMUbsuUfAgFGjvBqdY0Xfl9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75f1cb74-2fb9-4be7-8af4-978d311c185d",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            cedula = "11111111",
                            direccion = "Direcion Admin",
                            genero = 1,
                            habilitado = false,
                            nombre = "AlcaBox Admin",
                            primerApellido = "Alca",
                            recibeOfertas = false,
                            segundoApellido = "Box",
                            tipoCedula = 1,
                            tipoCuenta = 1
                        },
                        new
                        {
                            Id = "18709e1f-effc-4fc0-896c-ab4ff6755280",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e601b2e-a68b-441d-8309-ad6d7d2e9c3b",
                            Email = "billy@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BILLY@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELDCi8VDsCAa+jO9oeToHUmjlm9TTqqSxjvUEkxQyjm0hTiIcVl0casn3+o67HoKgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2be25147-6969-45c9-8341-b90b3878e3e7",
                            TwoFactorEnabled = false,
                            UserName = "Billy",
                            cedula = "87654321",
                            direccion = "Direcion Funcionario",
                            genero = 1,
                            habilitado = false,
                            nombre = "Billy",
                            primerApellido = "H",
                            recibeOfertas = false,
                            segundoApellido = "",
                            tipoCedula = 1,
                            tipoCuenta = 1
                        },
                        new
                        {
                            Id = "5db01d7b-7886-41c2-8674-ec5d8b790005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c985bbce-d8e9-4ae9-9de3-c831bc157fa8",
                            Email = "pablo@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PABLO@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC+eeg+sCwAfnFdctguCrfKquOPtVclRDNrCJTSnb70nih9lEgV0TJUudh+8JQVz+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "446102cc-aa41-4119-9cf5-78b274346549",
                            TwoFactorEnabled = false,
                            UserName = "Pablo",
                            cedula = "12345678",
                            direccion = "Direcion Usuario",
                            genero = 1,
                            habilitado = false,
                            nombre = "Pablo J.",
                            primerApellido = "J",
                            recibeOfertas = true,
                            segundoApellido = "",
                            tipoCedula = 1,
                            tipoCuenta = 1
                        },
                        new
                        {
                            Id = "6bb6d963-66a2-48e6-8b58-afedc10a8996",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99720bb3-520d-4705-a12d-5d98a057525a",
                            Email = "bot@alcabox.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOT@ALCABOX.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIwnXPU50rmvSZ1xLhALWheR2ezABHWD2+F53hVZ0S/9sPRQBVMFf2OO5DDDLlraLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a4ff38b-401a-4f6b-8b49-910caee3e2ec",
                            TwoFactorEnabled = false,
                            UserName = "Bot",
                            cedula = "55555555",
                            direccion = "Direcion Bot",
                            genero = 1,
                            habilitado = false,
                            nombre = "Bot R.",
                            primerApellido = "B",
                            recibeOfertas = false,
                            segundoApellido = "",
                            tipoCedula = 1,
                            tipoCuenta = 1
                        });
                });

            modelBuilder.Entity("backend.Models.Arancel", b =>
                {
                    b.Property<int>("ArancelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("ArancelId");

                    b.ToTable("Arancel");

                    b.HasData(
                        new
                        {
                            ArancelId = 1,
                            Nombre = "Arancel_1"
                        },
                        new
                        {
                            ArancelId = 2,
                            Nombre = "Arancel_2"
                        });
                });

            modelBuilder.Entity("backend.Models.BitacoraAccion", b =>
                {
                    b.Property<int>("Accion_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Accion")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Usuarios")
                        .HasColumnType("text");

                    b.HasKey("Accion_Id");

                    b.HasIndex("Usuarios");

                    b.ToTable("BitacoraAccion");
                });

            modelBuilder.Entity("backend.Models.Estado", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("EstadoId");

                    b.ToTable("Estado");

                    b.HasData(
                        new
                        {
                            EstadoId = 1,
                            Nombre = "En espera a Courier"
                        },
                        new
                        {
                            EstadoId = 2,
                            Nombre = "Recibido en Courier"
                        },
                        new
                        {
                            EstadoId = 3,
                            Nombre = "En Tránsito a CR"
                        },
                        new
                        {
                            EstadoId = 4,
                            Nombre = "En vuelo"
                        },
                        new
                        {
                            EstadoId = 5,
                            Nombre = "Recibido en Aduanas"
                        },
                        new
                        {
                            EstadoId = 6,
                            Nombre = "En trámite Aduanal"
                        },
                        new
                        {
                            EstadoId = 7,
                            Nombre = "En proceso de Entrega"
                        },
                        new
                        {
                            EstadoId = 8,
                            Nombre = "Entregado"
                        },
                        new
                        {
                            EstadoId = 9,
                            Nombre = "Finalizado"
                        });
                });

            modelBuilder.Entity("backend.Models.Paquete", b =>
                {
                    b.Property<int>("PaqueteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArancelId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Peso")
                        .HasColumnType("double precision");

                    b.Property<double>("Precio")
                        .HasColumnType("double precision");

                    b.Property<int>("Tracking")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("PaqueteId");

                    b.HasIndex("ArancelId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Paquete");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.BitacoraAccion", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("Usuarios");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("backend.Models.Paquete", b =>
                {
                    b.HasOne("backend.Models.Arancel", "Arancel")
                        .WithMany()
                        .HasForeignKey("ArancelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Arancel");

                    b.Navigation("Estado");

                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
